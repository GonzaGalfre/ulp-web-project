<!DOCTYPE html>
<html>
<head>
  <title>Question <%= questionId %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    @font-face {
    font-family: 'Neon';
    src: url('/fonts/neon2.ttf');
  }
    body {
      font-family: 'Neon', sans-serif;
      background-image: url('/img/bg4.jpg');
      background-size: cover;
      background-repeat: no-repeat;
      background-attachment: fixed;
      margin-top: 180px;
    }
    .question-box {
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      background-color: transparent; /* Remove background */
      box-shadow: 0 0 5px #fff, /* Inner white */
                  0 0 10px #fff, /* Middle white */
                  0 0 15px #00eeff, /* Outer pink */
                  0 0 30px #00eeff, /* Outer pink */
                  0 0 35px #00eeff; /* Outer pink */
    }
    .question-text{
      font-size: 40px;
      color: white;
    }
    .option-box {
      
      border-radius: 10px;
      box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
      height: 100%;
      overflow: hidden;
      background-color: transparent; /* Remove background */
      box-shadow: 0 0 5px #fff, /* Inner white */
                  0 0 10px #fff, /* Middle white */
                  0 0 15px #00eeff, /* Outer pink */
                  0 0 30px #00eeff, /* Outer pink */
                  0 0 35px #00eeff; /* Outer pink */
    }
    .option-box button.btn {
  border: none;
  width: 100%;
  height: 100%;
  font-size: 30px;
  padding: 40px; 
  border-radius: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  
}

.option-box button.btn:hover {
  box-shadow: 0 0 10px #fff, /* Inner white */
              0 0 20px #fff, /* Middle white */
              0 0 30px #ff00de, /* Outer pink */
              0 0 40px #ff00de, /* Outer pink */
              0 0 50px #ff00de, /* Outer pink */
              0 0 60px #ff00de, /* Outer pink */
              0 0 70px #ff00de; /* Outer pink */
}

    .bg-success {
      background-color: rgba(0, 255, 0, 0.95) !important;
    }
    .bg-danger {
      background-color: rgba(255, 0, 0, 0.95) !important;
    }
    .btn-outline-primary:focus, .btn-outline-primary:active {
    background-color: transparent !important;
}

  </style>
  
  
</head>
<body>
  <div class="container mt-5">
    <div class="row">
      <div class="col-12 question-box">
        <h1 class="text-center question-text"><%- question %></h1>
        <div id="timer" class="mt-4"></div>
      </div>
    </div>

    <% if (questionType === 'flag') { %>
      <div class="row justify-content-center">
        <div class="col-6 text-center">
          <img src="<%= flagUrl %>" class="img-fluid">
        </div>
      </div>
    <% } %>

    <div class="row mt-4">
      <% options.forEach((option, index) => { %>
        <div class="col-6 mb-4">
          <div class="option-box">
            <button class="btn btn-outline-primary w-100" 
                    onclick='submitAnswer("<%= typeof option === "string" ? option.replace(/'/g, "\\'") : option %>", <%= questionId %>)'>
              <%= option %>
            </button>
          </div>
        </div>
      <% }) %>
      
      
    </div>

    <div id="result" class="mt-4"></div>
  </div>

  <script>  
    function submitAnswer(selectedOption, questionId) {
    fetch('/game/answer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ answer: selectedOption, questionId })
    })
    .then(response => {
      if(!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      const resultDiv = document.getElementById('result');
 
      const normalizedCorrectAnswer = Array.isArray(data.correctAnswer) ? 
        data.correctAnswer.map(ans => ans.trim().toLowerCase()) : 
        data.correctAnswer.trim().toLowerCase();
      const normalizedSelectedOption = selectedOption.trim().toLowerCase();
  
      const optionBoxes = document.querySelectorAll('.option-box');
      optionBoxes.forEach(box => {
        const button = box.querySelector('button');
        const option = button.textContent.trim().toLowerCase();
  
        if (Array.isArray(normalizedCorrectAnswer) ? 
            normalizedCorrectAnswer.includes(option) : 
            option === normalizedCorrectAnswer) {
          box.classList.toggle('bg-success');
        } else if (option === normalizedSelectedOption) {
          box.classList.toggle('bg-danger');
        }
      });
  
      console.log('Setting timeout to move to the next question or results page.');
      console.log('Current questionId:', questionId);
      setTimeout(() => {
        console.log('Timeout completed. Navigating...');
        if (questionId >= 10) {
          console.log('Navigating to results page.');

          window.location.href = '/game/results';
        } else {
          console.log(`Navigating to next question: ${questionId + 1}`);

          window.location.href = `/game/question/${questionId + 1}`;
        }
      }, 1000);
    })
    .catch(error => {
      console.error('Error in fetch:', error);
    });
  }
  
    </script>
</body>
</html>